{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ge",
				"get_cross"
			],
			[
				"_m",
				"_move_vector"
			],
			[
				"mov",
				"move_vector"
			],
			[
				"pl",
				"players_gids"
			],
			[
				"for",
				"for_objects	(local, instance)"
			],
			[
				"pla",
				"players_gids"
			],
			[
				"map",
				"map_tiles"
			],
			[
				"i_",
				"i_end"
			],
			[
				"ra",
				"rad"
			],
			[
				"fo",
				"force	(local, instance)"
			],
			[
				"ne",
				"new_position	(local, instance)"
			],
			[
				"new",
				"new_position"
			],
			[
				"rt",
				"return	(keyword, instance)"
			],
			[
				"obj",
				"objects"
			],
			[
				"ob",
				"object_type	(local, instance)"
			],
			[
				"look",
				"look_result"
			],
			[
				"Cl",
				"ClientObject	(imported, class)"
			],
			[
				"sta",
				"check_static_events"
			],
			[
				"st",
				"static_objects	(local, instance)"
			],
			[
				"eve",
				"events	(local, instance)"
			],
			[
				"che",
				"check_static_objects"
			],
			[
				"stat",
				"static_events	(local, instance)"
			],
			[
				"get",
				"get_tuple"
			],
			[
				"player",
				"players"
			],
			[
				"evn",
				"event"
			],
			[
				"pa",
				"player	(local, instance)"
			],
			[
				"cl",
				"clear	(builtin, function)"
			],
			[
				"prev",
				"prev_players	(attribute, instance)"
			],
			[
				"tim",
				"timeout"
			],
			[
				"cla",
				"clear"
			],
			[
				"cle",
				"clear_looked"
			],
			[
				"pre",
				"prev_players	(attribute, instance)"
			],
			[
				"new_",
				"new_players	(local, instance)"
			],
			[
				"se",
				"set	(builtin, class)"
			],
			[
				"__",
				"__events__	(attribute, instance)"
			],
			[
				"eng",
				"engine"
			],
			[
				"ac",
				"action_name	(local, instance)"
			],
			[
				"flo",
				"floor"
			],
			[
				"f",
				"float"
			],
			[
				"fil",
				"fileno"
			],
			[
				"me",
				"message"
			],
			[
				"rem",
				"remove_list"
			],
			[
				"ti",
				"tiles"
			],
			[
				"m",
				"m_position"
			],
			[
				"del",
				"delta_time"
			],
			[
				"w",
				"width"
			],
			[
				"Lo",
				"LoadingScreen"
			],
			[
				"e",
				"events"
			],
			[
				"o",
				"observed"
			],
			[
				"tl",
				"tile"
			],
			[
				"t",
				"tile_type"
			],
			[
				"dict",
				"dict_file	(local, instance)"
			],
			[
				"dic",
				"dict_file	(local, instance)"
			],
			[
				"py",
				"pyx_file	(global, instance)"
			],
			[
				"pyx",
				"pyx_file	(global, instance)"
			],
			[
				"loa",
				"loaded	(attribute, instance)"
			],
			[
				"lo",
				"load_world"
			],
			[
				"C",
				"CELL"
			],
			[
				"s",
				"start"
			],
			[
				"end",
				"end_cord"
			],
			[
				"S",
				"Solid"
			],
			[
				"is",
				"isinstance	(builtin, function)"
			],
			[
				"clie",
				"client_name"
			],
			[
				"po",
				"position"
			],
			[
				"co",
				"counter"
			],
			[
				"mess",
				"messages"
			],
			[
				"en",
				"end_cord"
			],
			[
				"mo",
				"move_vector"
			],
			[
				"j",
				"j_end"
			],
			[
				"on",
				"on_key_press"
			],
			[
				"he",
				"height"
			],
			[
				"hea",
				"heal_time"
			],
			[
				"help",
				"help_text"
			],
			[
				"con",
				"control_keys"
			],
			[
				"hel",
				"help_file	(attribute, instance)"
			],
			[
				"remo",
				"remove_list	(attribute, instance)"
			],
			[
				"Ind",
				"IndexError	(builtin, class)"
			],
			[
				"ho",
				"hostname	(local, instance)"
			],
			[
				"slot",
				"slots"
			],
			[
				"cont",
				"control_keys	(local, instance)"
			],
			[
				"SE",
				"SERVER_PROFILE_FILE"
			],
			[
				"OU",
				"OUT_PORT"
			],
			[
				"pop",
				"pop_from_tile"
			],
			[
				"remov",
				"remove_object"
			],
			[
				"pro",
				"proxy"
			],
			[
				"Exce",
				"exception"
			],
			[
				"exc",
				"except"
			],
			[
				"pr",
				"print"
			],
			[
				"poll",
				"polling"
			],
			[
				"err",
				"error"
			],
			[
				"ex",
				"except"
			],
			[
				"req",
				"request"
			],
			[
				"clo",
				"closed_client"
			],
			[
				"res",
				"responses"
			],
			[
				"sto",
				"stop_event"
			],
			[
				"stop",
				"stop_reason"
			],
			[
				"So",
				"SocketServer"
			],
			[
				"acc",
				"accepted"
			],
			[
				"clos",
				"closed"
			],
			[
				"Tre",
				"Thread"
			],
			[
				"resp",
				"responses"
			],
			[
				"run",
				"running"
			],
			[
				"re",
				"result"
			],
			[
				"def",
				"default"
			],
			[
				"askhos",
				"ask_hostname"
			],
			[
				"sys",
				"sys_exit"
			],
			[
				"Trea",
				"thread"
			],
			[
				"un",
				"unpack"
			],
			[
				"cli",
				"client_name"
			],
			[
				"closed",
				"closed_clients"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/innuendo/games/pyglet_rpg/lib/share/point.pyx",
			"settings":
			{
				"buffer_size": 1822,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/map_observer.py",
			"settings":
			{
				"buffer_size": 2754,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\nfrom share.game_protocol import NewWorld, ServerAccept\n\nfrom engine.singleton import game\nfrom engine.enginelib.meta import DynamicObject\nfrom engine.game_objects import Player\n\n\nfrom config import *\n\n#####################################################################\nclass GameEngine:\n    \"интерфейс к движку игры\"\n    monster_count = 0\n    def __init__(self, intsave_time):\n        game.start()\n        self.messages = {}\n            \n    def game_connect(self, str name):\n        \"создание нового игрока\"\n        #выбираем позицию для нового игрока\n        position = game.mainworld.choice_position(Player, ask_player = True)\n        #создаем игрока\n        new_player = Player(name, position)\n        game.mainworld.new_object(new_player)\n        \n        #оставляем сообщение о подключении\n        self.messages[name] = []\n        for message in new_player.accept_response():\n            self.messages[name].append(message)\n        \n        game.guided_changed = True\n        print('New player %s' % name)\n\n        return ServerAccept()\n    \n    \n    def game_requests(self, messages):\n        \"выполнение запросов игроков\"\n        cdef str name, action\n\n        for name, player in game.guided_players.items():     \n            if name in messages:\n                for action, message in messages[name]:\n                        try:\n                            player.handle_action(action, message)\n                        except ActionDenied:\n                            pass\n    \n    \n    def game_update(self):\n        \"отыгрывание раунда игры\"\n        #получаем список активных локаций\n        self.active_locations = game.get_active_locations()\n        \n        \n        #обновляем объекты в активных локациях\n        for location in self.active_locations:\n            for player in location.players.values():\n                player.update()\n            \n            for static_object in location.static_objects.values():\n                static_object.update()\n        \n        #обновляем активнеы локации\n        for location in self.active_locations:\n            location.update()\n\n                    \n        \n    def game_responses(self):\n        \"получение ответов управляемых игрокв\"\n        #получаем ответы игроков\n        cdef list messages\n        cdef str name\n\n        for name, player in game.guided_players.items():\n            messages = []\n            if self.messages[name]:\n                messages += self.messages[name]\n                self.messages[name] = []\n            for response in player.handle_response():\n                messages.append(response)\n            \n            yield name, messages\n\n\n    def end_round(self):\n        \"завершение игрового раунда\"\n        for location in self.active_locations:\n            #завершаем раунд для объектов в локации\n            for player in location.players.values():\n                DynamicObject.complete_round(player)\n                player.complete_round()\n            location.complete_round()\n        \n        game.guided_changed = False\n        \n       \n    def save(self):\n        game.save()\n    \n    def game_quit(self, name):\n        print('%s quit' % name)\n        del self.messages[name]\n        game.remove_guided(name)\n        game.guided_changed = True\n    \n    \n                ",
			"file": "/home/innuendo/games/pyglet_rpg/lib/engine/engine_interface.pyx",
			"file_size": 3682,
			"file_write_time": 1351412600000000,
			"settings":
			{
				"buffer_size": 3329,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/pyglet_rpg.sublime-build",
	"command_palette":
	{
		"height": 272.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Pa",
				"Package Control: Install Package"
			],
			[
				"",
				"About"
			],
			[
				"pac",
				"Preferences: Browse Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/collissions.pyx",
		"/home/innuendo/games/pyglet_rpg/tools/pyglet_rpg.sublime-project",
		"/home/innuendo/games/pyglet_rpg/lib/serverside/server.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/movable.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/movable.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/map_observer.pyx",
		"/home/innuendo/games/pyglet_rpg/server.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/singleton.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/world/meta.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/client_objects/objects_lib.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/client_objects/shells.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/client_objects/static_objects.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/client_objects/units.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/gui_elements.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/gui_elements.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/gui_lib.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/gui_lib.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/surfaces.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/window.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui/window.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_land.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_objects.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/engine_interface.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/events.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/mathlib.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/singleton.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/collissions.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/map_observer.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui_client.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/input.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/player.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/meta.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/skills.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/misc.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/misc.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/shells.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/teleports.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/world/location.py",
		"/home/innuendo/games/pyglet_rpg/lib/share/gameprotocol/client_requestes.py",
		"/home/innuendo/games/pyglet_rpg/lib/share/gameprotocol/server_responses.py",
		"/home/innuendo/games/pyglet_rpg/bot.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gameclient.py",
		"/home/innuendo/games/pyglet_rpg/lib/share/mathlib.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/share/mathlib.pxd",
		"/home/innuendo/games/pyglet_rpg/lib/share/mathlib.py",
		"/home/innuendo/games/pyglet_rpg/run_server.sh",
		"/home/innuendo/games/pyglet_rpg/config.py",
		"/tmp/foo.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/world/world_persistence.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/client_objects/all.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_static_objects.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_lib.py",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/gui_client.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/events.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_land.pyx",
		"/home/innuendo/games/pyglet_rpg/README.md",
		"/home/innuendo/games/pyglet_rpg/client_config.py",
		"/home/innuendo/games/pyglet_rpg/tools/wcl.sh",
		"/home/innuendo/games/pyglet_rpg/tools/setup.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/items.py",
		"/home/innuendo/games/pyglet_rpg/data/worldmaps/underground2/init.py",
		"/home/innuendo/games/pyglet_rpg/data/worldmaps/underground/init.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/gameobjects/player.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/units_lib.py",
		"/home/innuendo/games/pyglet_rpg/data/worldmaps/ground/init.py",
		"/home/innuendo/games/pyglet_rpg/lib/serverside/socket_server.py",
		"/home/innuendo/games/pyglet_rpg/lib/share/packer.py",
		"/home/innuendo/games/pyglet_rpg/lib/share/packer.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_objects.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/socket_client.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/clientside/view/view_static_objects.pyx",
		"/home/innuendo/games/pyglet_rpg/lib/share/protocol_lib.pyx",
		"/home/innuendo/games/pyglet_rpg/test.py",
		"/home/innuendo/games/pyglet_rpg/tools/clean.sh",
		"/home/innuendo/games/pyglet_rpg/client.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/world/meta.pyx",
		"/home/innuendo/games/pyglet_rpg/tools/profile_client.py",
		"/home/innuendo/games/pyglet_rpg/engine/world/meta.py",
		"/home/innuendo/games/pyglet_rpg/engine/singleton.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/singleton.py",
		"/home/innuendo/games/pyglet_rpg/lib/engine/world/map_source.py",
		"/home/innuendo/games/pyglet_rpg/share/mathlib.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/world/meta.pyx",
		"/home/innuendo/games/pyglet_rpg/clientside/gui/surfaces.py",
		"/home/innuendo/games/pyglet_rpg/engine/world/gameworlds.py",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/player.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/player.py",
		"/home/innuendo/games/pyglet_rpg/engine/world/world_persistence.py",
		"/home/innuendo/games/pyglet_rpg/engine/singleton.pxd",
		"/home/innuendo/games/pyglet_rpg/worldmaps/ground/init.py",
		"/home/innuendo/games/pyglet_rpg/worldmaps/underground/init.py",
		"/home/innuendo/games/pyglet_rpg/worldmaps/underground2/init.py",
		"/home/innuendo/games/pyglet_rpg/serverside/socket_server.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/units.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/collissions.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/misc.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/teleports.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/meta.py",
		"/home/innuendo/games/pyglet_rpg/serverside/multiplexer.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/events.pxd",
		"/home/innuendo/games/pyglet_rpg/engine/events.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/engine_interface.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/skills.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/shells.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/world/gameworlds.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/world/location.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/meta.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/gameobjects/items.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/units_lib.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/meta.сy",
		"/home/innuendo/games/pyglet_rpg/engine/engine_interface.pyx",
		"/home/innuendo/games/pyglet_rpg/share/packer.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/map_observer.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/movable.pyx",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/collissions.py",
		"/home/innuendo/games/pyglet_rpg/share/mathlib.pxd",
		"/home/innuendo/games/pyglet_rpg/share/mathlib.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/movable.py",
		"/home/innuendo/games/pyglet_rpg/clientside/gui/gui_lib.py",
		"/home/innuendo/games/pyglet_rpg/clientside/client_objects/objects_lib.py",
		"/home/innuendo/games/pyglet_rpg/clientside/help.txt",
		"/home/innuendo/games/pyglet_rpg/clientside/gui/gui_elements.py",
		"/home/innuendo/games/pyglet_rpg/clientside/gui/window.py",
		"/home/innuendo/games/pyglet_rpg/clientside/gameclient.py",
		"/home/innuendo/games/pyglet_rpg/clientside/socket_client.py",
		"/home/innuendo/games/pyglet_rpg/engine/enginelib/equipment.py",
		"/home/innuendo/games/pyglet_rpg/clientside/view/view_lib.py",
		"/home/innuendo/games/pyglet_rpg/clientside/view/view_objects.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			"*.py",
			"",
			"/home/innuendo/games/pyglet_rpg/engine",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"hypo",
			"labs",
			"mathlib",
			"share.mathlib",
			"stati",
			"static",
			"hypot",
			"wWORLD_PATH",
			"path",
			"items",
			"Corpse",
			"mul",
			"LoadingScreen",
			"self.",
			"@",
			"Player",
			"(self, point)",
			"another",
			"_(self)",
			"Event",
			"self.",
			"point",
			"self.move()",
			"Movable.move()",
			"Impassable",
			"Point()",
			"(self):",
			"(self)",
			"self, number",
			"number",
			"@point_wrap",
			"defaultdict",
			"randrange",
			"randra",
			"engine_lib",
			"engine_l",
			"engine_lib",
			"wrappers",
			"play",
			"pyglet_window",
			"self.antilag_shift ",
			"self.sh",
			"add_player",
			"pop_player",
			"new_stat",
			"	",
			"Solid",
			"ActiveState",
			"remove_object",
			"add_to_remove",
			"		",
			"self.excp",
			"Exception",
			"item colli",
			"empty",
			"ini",
			"self.ser",
			"raise",
			"pack",
			"dumps",
			"PackageError",
			"MethodError",
			"HandleAcceptError",
			"lock",
			"#!/"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"abs",
			"share.point",
			"",
			"(Point self, Point point)",
			"_(Event self",
			"",
			"Point(0,0)",
			"(Point self):",
			"(Point self)",
			"Point self, float number",
			"float number",
			"",
			"meta"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/innuendo/games/pyglet_rpg/lib/share/point.pyx",
					"settings":
					{
						"buffer_size": 1822,
						"regions":
						{
						},
						"selection":
						[
							[
								211,
								211
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/innuendo/games/pyglet_rpg/lib/engine/enginelib/map_observer.py",
					"settings":
					{
						"buffer_size": 2754,
						"regions":
						{
						},
						"selection":
						[
							[
								2725,
								2725
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 945.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/innuendo/games/pyglet_rpg/lib/engine/engine_interface.pyx",
					"settings":
					{
						"buffer_size": 3329,
						"regions":
						{
						},
						"selection":
						[
							[
								415,
								415
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 116.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"",
				"server.py"
			],
			[
				"r",
				"README.md"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 196.0,
	"status_bar_visible": true
}
